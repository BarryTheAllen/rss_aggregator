services:
  web:
    build: .
    container_name: rss_aggregator
    env_file:
      - .env
    environment:
      - MODE
      - LOG_LEVEL
      - ALGORITHM
      - SECRET_KEY
      - DB_HOST
      - DB_PORT
      - DB_USER
      - DB_PASS
      - DB_NAME
      - TEST_DB_HOST
      - TEST_DB_PORT
      - TEST_DB_USER
      - TEST_DB_PASS
      - TEST_DB_NAME
      - REDIS_HOST
      - REDIS_PORT
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  db:
    image: postgres:13
    container_name: rss_db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: rss_redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: rss_postgres_exporter
    env_file:
      - .env
    environment:
      - DATA_SOURCE_NAME
    depends_on:
      db:
        condition: service_started

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: rss_redis_exporter
    env_file:
      - .env
    environment:
      - REDIS_ADDR
    depends_on:
      redis:
        condition: service_started

  prometheus:
    image: prom/prometheus:latest
    container_name: rss_prometheus
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: rss_grafana
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD
      - GF_USERS_ALLOW_SIGN_UP
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    ports:
      - "3000:3000"

  celery_worker:
    build: .
    container_name: rss_celery_worker
    env_file:
      - .env
    environment:
      - MODE
      - DB_HOST
      - DB_PORT
      - DB_USER
      - DB_PASS
      - DB_NAME
      - REDIS_HOST
      - REDIS_PORT
    command: celery -A app.tasks.celery_app worker --loglevel=info
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started

  celery_beat:
    build: .
    container_name: rss_celery_beat
    env_file:
      - .env
    environment:
      - MODE
      - DB_HOST
      - DB_PORT
      - DB_USER
      - DB_PASS
      - DB_NAME
      - REDIS_HOST
      - REDIS_PORT
    command: >
      sh -c "
        rm -f celerybeat-schedule* &&
        celery -A app.tasks.celery_app beat --loglevel=info
      "
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started

  celery_flower:
    build: .
    container_name: rss_celery_flower
    env_file:
      - .env
    environment:
      - MODE
      - DB_HOST
      - DB_PORT
      - DB_USER
      - DB_PASS
      - DB_NAME
      - REDIS_HOST
      - REDIS_PORT
    command: celery -A app.tasks.celery_app flower --port=5555
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      celery_worker:
        condition: service_started
    ports:
      - "5555:5555"

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: